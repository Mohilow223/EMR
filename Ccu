<!DOCTYPE html>

<html>

<head>

    <title>Medications sheet</title>

	

    <style>

	

	    .text-title-center {

    position: absolute;

    top: 10px;

    right: 100px; /* Change the value here */

	left: 100px;

    font-size: 20px;

    background-color: white;

    color: black;

    padding: 5px 10px;

}

	

.title-sader {

    position: absolute;

    top: 60px;

    right: 100px; /* Adjust the value here to move it horizontally */

    font-size: 20px;

     background-color: white;

    color: black;

    padding: 5px 10px;

}

	

.title-ccu {

    position: absolute;

    top: 90px;

    right: 100px; /* Adjust the value here to move it horizontally */

    font-size: 20px;

     background-color: white;

    color: black;

    padding: 5px 10px;

}

	

		

		

		.text-top-right {

    position: absolute;

    top: 30px;

    right: 100px; /* Change the value here */

    font-size: 20px;

    background-color: white;

    color: black;

    padding: 5px 10px;

}

	

        body {

            font-family: Arial, sans-serif;

            margin: 150px;

            padding: 0;

            

      

        }



        table {

            border-collapse: collapse;

            width: 100%;

        }



        th, td {

            border: 2px solid black;

            padding: 2px;

            text-align: center;

        }



        th {

            background-color: #f2f2f2;

        }

 .text-box {

            border: 1px solid black;

            background-color: white;

            padding: 10px;

        }

        input[type="text"] {

            padding: 0px;

            width: 10%;

			

            font-size: 14px;

			text-align: right;

        }



        button {

            padding: 6px 12px;

            margin-right: 5px;

        }



        .delete-button {

            background-color: transparent;

            border: none;

            cursor: pointer;

        }

		 /* Add Drug Button */

        #addDrugButton {

            padding: 6px 12px;

            margin-right: 5px;

        }



        /* New Item Input */

        #newItemInput {

            display: none;

            padding: 6px;

            margin-right: 5px;

            width: 200px;

        }

		.patient-n-input {

    position: absolute;

    top: 150px;

    right: 220px; /* Adjust the value here to move it horizontally */

    font-size: 14px Solid-red;

    width: 15%;

	

}	

	.patient-a-input {

    position: absolute;

    top: 180px;

    right: 180px; /* Adjust the value here to move it horizontally */

    font-size: 12px;

    width: 15%;

}

.patient-d-input {

    position: absolute;

    top: 210px;

    right: 210px; /* Adjust the value here to move it horizontally */

    font-size: 12px;

    width: 15%;

}



.patient-t-input {

    position: absolute;

    top: 240px;

    right: 200px; /* Adjust the value here to move it horizontally */

    font-size: 12px;

    width: 15%;

}

.patient-hx-input {

    position: absolute;

    top: 150px;

    left: 130px; /* Adjust the value here to move it horizontally */

    font-size: 18px;

    width: 70%;

	height: 10px; 

}



        /* Modal Styles ... */

        #editListModal {

            display: none;

            position: absolute;

            top: 50%;

            left: 50%;

            transform: translate(-50%, -50%);

            background-color: #f2f2f2;

            padding: 20px;

            border: 1px solid #ccc;

			height: 2px; 

        }

		

		#newItem {

            width: 200px; /* Adjust the width as needed */

        }



       /* Date Box */

        .date-box {

            font-size: 14px;

            padding: 6px;

            border: 1px solid #ccc;

            width: 10%;

            box-sizing: border-box;

        }

/* Hide the buttons in print mode */

        @media print {

            button {

                display: none;

            }

        }



		/* Patient history container */

.patient-hx-input-container {

    position: absolute; /* Make it absolute positioning to control the position */

    top: 30px; /* Change the value here */

    left: 20px; /* You can also use left property to adjust horizontal position */

    text-align: left;

	width:40%; 

	height: 60px; 	

}



.patient-hx-input label {

    display: block;

    text-align: left;

    padding-right: 5px;

    padding: 4px;

}



		

		

		/* Additional Info Container */

        .additional-info-container {

            float: right; /* Float the additional-info class to the right */

            margin-right: 20px; /* Add some right margin for spacing */

            text-align: right; /* Align text inside the container to the right */

        }



        /* Additional Info Label */

        .additional-info label {

            display: block; /* Display the label as a block element */

            text-align: right; /* Align the label text to the right */

            padding-right: 5px; /* Add some padding to separate label from input */

			padding: 4px; 



        }



        /* Additional Info Input */

        .additional-info input,

        .additional-info .date-box {

            /* Set the width of the input fields as desired */

            box-sizing: border-box; /* Include padding and border in the width */

            margin-right: 10px; /* Add margin-right to move the input fields further right */

			

        }



        /* Clear the float */

        .clear {

            clear: both;

        }

		



		

        /* Print Styles */

        @media print {

            .print-container {

                border: 1px solid #ccc;

                padding: 20px;

            }

		            #itemSelect {

                display: none;

			}

			.delete-column {

                display: none;

            }

        

		



   

    </style>

</head>

<body>

<div class="text-title-center"><b>Medications sheet</b></div>

    	  

<div class="text-top-right"><b>دائرة صحة النجف الاشرف</b></div>



<div class="title-sader"> <b>مدينة الصدر الطبية</b></div>



<div class="title-ccu"> <b>وحدة الانعاش</b></div>



<div class="title-ccu"> <b>-----------------------------------------------------------------------</b></div>



<div class="patient-hx-input">

        <label for="medicalhx"> <b>Medical history</b> </label>

        <input type="text" id="medicalhx" class="patient-hx-input-container" placeholder="Patient's medical history">

    </div>



       <div class="additional-info">

        <label for="patientName">اسم المريض </label>

        <input type="text" id="patientName" class="patient-n-input" placeholder="Enter patient name">

    </div>

	

    <div class="additional-info">

        <label for="patientAge">العمر</label>

        <input type="text" id="patientAge" class="patient-a-input" placeholder="Enter patient age">

    </div>

    <div class="additional-info">

        <label for="doctorName">اسم الطبيب </label>

        <input type="text" id="doctorName" class="patient-d-input" placeholder="Enter doctor name">

    </div>

	

    <div class="additional-info">

         <label for="patientAge">	</label>

        <input type="text" id="date" class="patient-t-input" placeholder="Date">

    </div>

	<div class="additional-info">

         <label for="patientAge">التاريخ</label>

        <input type="text" id="date" class="patient-t-input" placeholder="Date">

    </div>





    <h1> </h1>

    <div>

        <input list="itemList" id="itemSelect" placeholder="Search for an item">

        <datalist id="itemList">

            <option value="Concord tab">

            <option value="Lofral tab">

            <option value="Decadron amp">

            <option value="Diostar tab">

            <option value="Paracetamol vial">

            <option value="Flagyl  vial">

            <option value="Flagyl  tab">

            <option value="Angised  tab">

            <option value="Angised  amp">

            <option value="Dopamin  amp">

            <option value="Plasil  amp">

            <option value="Tramal amp">

            <option value="Zofran amp">

        </datalist>

        <button onclick="addItem()">Add Item</button>

        <button onclick="addNewRow()">New</button>

        <button onclick="printTable()">Print</button>

        <button onclick="clearTable()">Clear</button>

        <button onclick="showEditList()">Edit List</button>

      		<button onclick="savePatient()">Save Patient</button>

<button onclick="loadSavedWebpages()">Load Saved Webpages</button>

<button id="addDrugButton" onclick="showNewItemInput()">Add Drug</button>

    <input type="text" id="newItemInput" placeholder="Enter new drug" onblur="hideNewItemInput()">

    <datalist id="itemList">



		

    </div>

    <br>

    <div class="print-container">

        <table id="dataTable">

            <thead>

                <tr>

                    <th>#</th>

                    <th>Medications</th>

                    <th>Dosage</th>

                    <th>Frequency</th>

					<th>Ph. Notes</th>

                    

                </tr>

            </thead>

            <tbody>

                <!-- Initial table data rows -->

             

            </tbody>

        </table>

    </div>



    <!-- Modal for Edit List ... -->

    <div id="editListModal">

        <h2>Edit Item List</h2>

        <table id="itemListTable">

            <thead>

                <tr>

                    <th>Item</th>

                    <th>Delete</th>

                </tr>

            </thead>

            <tbody>

                <!-- The table rows for the items will be dynamically added here -->

            </tbody>

        </table>

        <input type="text" id="newItem" placeholder="New Item">

        <button onclick="addItemToList()">Add Item</button>

        <button onclick="closeEditListModal()">Close</button>

		  <button onclick="saveItems()">Save</button>

    </div>



    <script>

        const itemSelect = document.getElementById('itemSelect');

        const dataTable = document.getElementById('dataTable').getElementsByTagName('tbody')[0];

        let activeCell = null;

        let rowNum = 1;



        // Load saved items from local storage on page load

        window.onload = loadItems;



        function addItem() {

            const selectedItem = itemSelect.value;

            if (selectedItem) {

                const newRow = dataTable.insertRow();

                newRow.insertCell().textContent = rowNum++;

                newRow.insertCell().textContent = selectedItem;

                newRow.insertCell().contentEditable = true;

                newRow.insertCell().contentEditable = true;

                newRow.insertCell().innerHTML = '<button class="delete-button" onclick="deleteRow(this)"><span class="delete-icon">&#128465;</span></button>';

                saveItems(); // Save the added item

            }

        }



        function addNewRow() {

            const newRow = dataTable.insertRow();

            newRow.insertCell().textContent = rowNum++;

            newRow.insertCell().textContent = "";

            newRow.insertCell().contentEditable = true;

            newRow.insertCell().contentEditable = true;

            newRow.insertCell().innerHTML = '<button class="delete-button" onclick="deleteRow(this)"><span class="delete-icon">&#128465;</span></button>';

        }



        function printTable() {

            // Hide the buttons during printing (handled by print media styles)

            window.print();

        }



        function clearTable() {

    // Remove the entire tbody element and its content

    const dataTableBody = document.getElementById('dataTable').getElementsByTagName('tbody')[0];

    dataTableBody.innerHTML = '';



    // Reset the row number counter

    rowNum = 1;

}

		



        function showEditList() {

            const editListModal = document.getElementById('editListModal');

            editListModal.style.display = 'block';

            updateDropdownOptions();

        }

		



        function closeEditListModal() {

            const editListModal = document.getElementById('editListModal');

            editListModal.style.display = 'none';

        }



        function updateDropdownOptions() {

            const options = Array.from(itemSelect.options);

            const itemListTable = document.getElementById('itemListTable').getElementsByTagName('tbody')[0];

            const itemRows = itemListTable.getElementsByTagName('tr');



            // Clear existing options

            for (const option of options) {

                if (option.value !== "") {

                    itemSelect.removeChild(option);

                }

            }



            // Add items from the Edit List to the dropdown

            for (const itemRow of itemRows) {

                const itemCell = itemRow.getElementsByTagName('td')[0];

                const newItem = itemCell.textContent.trim();

                if (newItem !== "") {

                    const newOption = document.createElement('option');

                    newOption.value = newItem;

                    newOption.textContent = newItem;

                    itemSelect.appendChild(newOption);

                }

            }

        }



        function addItemToList() {

            const newItem = document.getElementById('newItem').value.trim();

            if (newItem !== "") {

                const itemListTable = document.getElementById('itemListTable').getElementsByTagName('tbody')[0];

                const newRow = itemListTable.insertRow();

                const itemCell = newRow.insertCell();

                itemCell.textContent = newItem;



                const deleteCell = newRow.insertCell();

                const deleteButton = document.createElement('button');

                deleteButton.textContent = '	';

                deleteButton.onclick = function() {

                    itemListTable.deleteRow(newRow.rowIndex);

                    updateDropdownOptions();

                    saveItems(); // Save the updated list after deletion

                };

                deleteCell.appendChild(deleteButton);

                updateDropdownOptions();

                saveItems(); // Save the new item to the list

            }

        }



        function loadItems() {

            // Load saved items from local storage

            const savedItems = JSON.parse(localStorage.getItem('items'));

            if (savedItems) {

                const itemListTable = document.getElementById('itemListTable').getElementsByTagName('tbody')[0];

                for (const item of savedItems) {

                    const newRow = itemListTable.insertRow();

                    const itemCell = newRow.insertCell();

                    itemCell.textContent = item;



                    const deleteCell = newRow.insertCell();

                    const deleteButton = document.createElement('button');

                    deleteButton.textContent = 'Delete';

                    deleteButton.onclick = function() {

                        itemListTable.deleteRow(newRow.rowIndex);

                        updateDropdownOptions();

                        saveItems(); // Save the updated list after deletion

                    };

                    deleteCell.appendChild(deleteButton);

                }

                updateDropdownOptions();

            }

        }



        function saveItems() {

            // Save items to local storage

            const itemListTable = document.getElementById('itemListTable').getElementsByTagName('tbody')[0];

            const itemRows = itemListTable.getElementsByTagName('tr');

            const savedItems = [];

            for (const itemRow of itemRows) {

                const itemCell = itemRow.getElementsByTagName('td')[0];

                const item = itemCell.textContent.trim();

                if (item !== "") {

                    savedItems.push(item);

                }

            }

            localStorage.setItem('items', JSON.stringify(savedItems));

        }

		

       function deleteRow(button) {

    const row = button.parentNode.parentNode;

    const dataTable = document.getElementById('dataTable').getElementsByTagName('tbody')[0];

    dataTable.deleteRow(row.rowIndex);



    // Renumber the rows after deletion

    const rows = dataTable.getElementsByTagName('tr');

    for (let i = 0; i < rows.length; i++) {

        const rowNumberCell = rows[i].getElementsByTagName('td')[0];

        rowNumberCell.textContent = i + 1;

    }



    saveItems(); // Save the updated table after row deletion

} 

		

	function savePatient() {

        const patientName = document.getElementById('patientName').value.trim();

        if (patientName === '') {

            alert('Please enter the patient name before saving the webpage.');

            return;

        }



        const tableData = document.getElementById('dataTable').outerHTML;

        const blob = new Blob([tableData], { type: 'text/html' });

        saveAs(blob, patientName + '.html');

    }



	function loadSavedWebpages() {

        // Open a new popup window to show the saved webpages

        const popupWindow = window.open('', '_blank', 'width=600,height=400');

        const savedWebpages = getSavedWebpages();



        // Create a table to display the saved webpages

        const table = document.createElement('table');

        table.style.width = '100%';

        table.style.borderCollapse = 'collapse';



        // Create the table header

        const headerRow = table.insertRow();

        const nameHeader = headerRow.insertCell();

        nameHeader.textContent = 'Patient Name';

        nameHeader.style.border = '1px solid black';

        const loadHeader = headerRow.insertCell();

        loadHeader.textContent = 'Load';

        loadHeader.style.border = '1px solid black';



        // Populate the table with saved webpage data

        for (const patientName in savedWebpages) {

            const row = table.insertRow();

            const nameCell = row.insertCell();

            nameCell.textContent = patientName;

            nameCell.style.border = '1px solid black';



            const loadCell = row.insertCell();

            const loadButton = document.createElement('button');

            loadButton.textContent = 'Load';

            loadButton.onclick = function() {

                loadSavedPage(patientName);

            };

            loadCell.appendChild(loadButton);

            loadCell.style.border = '1px solid black';

        }



        // Add the table to the popup window

        popupWindow.document.body.appendChild(table);

    }



    function savePatient() {

        // Get the patient name entered by the user

        const patientName = document.getElementById('patientName').value;



        // Create a blob from the entire HTML content of the webpage

        const htmlContent = document.documentElement.outerHTML;

        const blob = new Blob([htmlContent], { type: 'text/html' });



        // Use FileSaver.js to save the blob as a file

        saveAs(blob, `${patientName}.html`);

    }

    function loadSavedPage(patientName) {

        // Load the saved webpage with the specified patient name

        const savedWebpages = getSavedWebpages();

        const savedPage = savedWebpages[patientName];

        if (savedPage) {

            document.body.innerHTML = savedPage;

            alert('Webpage loaded successfully!');

        } else {

            alert('Saved webpage not found!');

        }

    }





    </script>

</body>

</html>

